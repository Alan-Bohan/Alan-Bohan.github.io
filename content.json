{"meta":{"title":"DBHblog","subtitle":"--小尾巴","description":"","author":"John Doe","url":"","root":"/"},"pages":[{"title":"404 Not Found","date":"2019-05-23T00:38:12.612Z","updated":"2019-05-21T07:26:44.000Z","comments":true,"path":"404.html","permalink":"/404.html","excerpt":"","text":"404 Not Found 很抱歉，您访问的页面不存在可能是输入地址有误或该地址已被删除"},{"title":"所有分类","date":"2019-05-23T00:38:12.619Z","updated":"2019-05-21T01:00:18.000Z","comments":true,"path":"categories/index.html","permalink":"/categories/index.html","excerpt":"","text":""},{"title":"我的朋友们","date":"2019-05-23T00:38:12.622Z","updated":"2019-05-21T07:23:32.000Z","comments":true,"path":"friends/index.html","permalink":"/friends/index.html","excerpt":"","text":"这里可以写友链页面下方的文字备注，例如自己的友链规范、示例等。"},{"title":"","date":"2019-05-23T00:38:12.625Z","updated":"2019-05-21T07:31:54.000Z","comments":true,"path":"mylist/index.html","permalink":"/mylist/index.html","excerpt":"","text":""},{"title":"关于","date":"2019-05-23T00:38:12.616Z","updated":"2019-05-21T07:43:26.000Z","comments":true,"path":"about/index.html","permalink":"/about/index.html","excerpt":"","text":"哈哈哈，搭建博客真的好玩"},{"title":"所有标签","date":"2019-05-23T00:38:12.629Z","updated":"2019-05-21T01:00:44.000Z","comments":true,"path":"tags/index.html","permalink":"/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"使用sparkSQL进行数据分析并使用echart画图","slug":"使用sparkSQL进行数据分析并使用echart画图","date":"2019-06-01T04:41:08.000Z","updated":"2019-06-03T11:16:44.141Z","comments":true,"path":"2019/06/01/使用sparkSQL进行数据分析并使用echart画图/","link":"","permalink":"/2019/06/01/使用sparkSQL进行数据分析并使用echart画图/","excerpt":"使用sparkSQL进行数据分析并使用echart画图使用sparkSQL进行数据分析并使用echart画图刚学了一些大数据的基础知识，老师留了一个小实验，用sparkSql或mapreduce分析数据，然后在进行数据可视化。因为sparkSql可以使用sql语句查询，所以采取的sparksql进行数据分析。 下面就记录一些操作","text":"使用sparkSQL进行数据分析并使用echart画图使用sparkSQL进行数据分析并使用echart画图刚学了一些大数据的基础知识，老师留了一个小实验，用sparkSql或mapreduce分析数据，然后在进行数据可视化。因为sparkSql可以使用sql语句查询，所以采取的sparksql进行数据分析。 下面就记录一些操作 实验要求：老师给的5000条数据，格式是这样的 - 分析发布公司最多的Top 10 公司名称及发布职位数量【饼状图展示】 - 分析招聘职位最多的Top5 职位名称及数量【柱状图展示】 - 分析工资最高的职位Top3 职位名称及工资【折线图展示】 前提条件：在idea中配置好hadoop、scala和spark环境 配置好环境之后就可以开始写代码了 一、用sparkSQL分析数据1、新建一个scala object12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455import org.apache.hadoop.io.LongWritableimport org.apache.hadoop.mapred.TextInputFormatimport org.apache.spark.rdd.RDDimport org.apache.spark.sql.types.&#123;DataTypes, StructField&#125;import org.apache.spark.&#123;SparkConf, SparkContext&#125;import org.apache.spark.sql.&#123;Row, SQLContext, SparkSession&#125;import scala.collection.mutable.ArrayBufferimport scala.xml.Textobject DataAnalysis &#123; def main(args: Array[String]): Unit = &#123; val conf = new SparkConf().setMaster(\"local[*]\").setAppName(\"dataFrameTest\") .set(\"spark.port.maxRetries\",\"1000\"); val sc = new SparkContext(conf) val spark = SparkSession.builder().config(conf).getOrCreate() import spark.implicits._ val data = spark.read .format(\"com.databricks.spark.csv\") .option(\"inferSchema\", \"true\") .option(\"header\", \"true\") //reading the headers .option(\"mode\", \"DROPMALFORMED\") .option(\"nullValue\", \"?\") .csv(\"c:\\\\51Job_python_5000.txt\"); data.show() val dataDF = data.toDF(\"work\",\"company\",\"add\",\"salary\",\"date\") val dataDF2 = dataDF.filter(\"work != '' and company != '' and add != '' and salary != '' and date != ''\") //dataDF.show() //dataDF2.show() val message = dataDF2.createOrReplaceTempView(\"message\") //第一题答案 val resdata = spark.sql(\"select count(*) num,company FROM message group by company\").registerTempTable(\"q1temp\") val resdata2 = spark.sql(\"select num,company from (select num,company,row_number() OVER(ORDER BY num DESC) rank from q1temp) tmp where rank &lt;= 10\") resdata2.show() //第二题答案 val resdata3 = spark.sql(\"select count(*) num,work FROM message group by work\") resdata3.show() resdata3.registerTempTable(\"q2temp\") val resdata4 = spark.sql(\"select num,work from (select num,work,row_number() OVER(ORDER BY num DESC) rank from q2temp) tmp where rank &lt;= 5\") resdata4.show() //第三题答案 val resdata5 = spark.sql(\"\"\" select work,company,salary, (CASE WHEN salary like '%千/月%' then translate(split(salary,'[-/]')[1],'千','')*1000 when salary like '%万/月%' then translate(split(salary,'[-/]')[1],'万','')*10000 when salary like '%万/年%' then round(translate(split(salary,'[-/]')[1],'万','')*10000/12) else 0 end) new_salary from message \"\"\").registerTempTable(\"q3temp\") val resdata6 = spark.sql(\"select work,company,salary,new_salary from (select work,company,salary,new_salary,row_number() OVER(ORDER BY new_salary DESC) rank from q3temp ) tmp where rank &lt;= 3\") resdata6.show() resdata2.write.json(\"C://result/res1\") resdata4.write.json(\"C://result/res2\") resdata6.write.json(\"C://result/res3\") &#125;&#125; 总结一些点： （1）读取csv文件中文乱码 解决办法：我是直接把csv文件的内容复制出来放到一个txt里面保存成utf-8格式，之后直接读取.txt。因为csv就是用逗号分隔的格式虽然后缀是txt但保留了csv格式的内容，所以可以使用.csv()方法读取 （2）第一题把resdata和resdata2写成一条语句错误，我也不知道为啥 解决办法：我把它分成两条语句用registerTempTable生成了一个临时表就好使了 （3）row_number() OVER(ORDER BY num DESC)内置函数 语法格式：row_number() over(partition by 分组列 order by 排序列 desc) over()里头可以分组以及排序，因为我需要按照num小到大所以没写分组 （4）write.json()输出的json文件 2、运行这个scala object执行之后会生成json文件 二、用echart画图1、把输出的json文件导入到Java web工程的web下边2、修改一下json文件的格式用spark输出的json文件格式不太对，在后面读取会有问题，所以修改一下，输出的三个文件都修改 修改前： 修改后： 3、新建jsp用echart画图直接贴代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180&lt;%@ page contentType=\"text/html;charset=UTF-8\" language=\"java\" %&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Title&lt;/title&gt; &lt;script src=\"/js/jquery.js\"&gt;&lt;/script&gt; &lt;script src=\"/js/echarts.min.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;input type=\"button\" id=\"btn1\" value=\"显示第一题结果图\"&gt; &lt;input type=\"button\" id=\"btn2\" value=\"显示第二题结果图\"&gt; &lt;input type=\"button\" id=\"btn3\" value=\"显示第三题结果图\"&gt; &lt;div id=\"main1\" style=\"width: 1000px;height: 500px;background-color: azure\"&gt;&lt;/div&gt; &lt;div id=\"main2\" style=\"width: 1000px;height: 500px;background-color: azure\"&gt;&lt;/div&gt; &lt;div id=\"main3\" style=\"width: 1000px;height: 500px;background-color: azure\"&gt;&lt;/div&gt;&lt;/body&gt;&lt;script&gt; var q1Data = []; var q1Company = []; $(function () &#123; // 异步加载数据 $('#btn1').click(function () &#123; q1Data = []; q1Company = []; $.getJSON(\"part1.json\",\"\",function (data) &#123; $.each(data,function (i, v) &#123; q1Data.push(&#123; name: v.company, value: v.num &#125;); q1Company.push(v.company) &#125;) console.info(q1Company) console.info(q1Data) getChart() &#125;); &#125;) $('#btn2').click(function () &#123; q2Work = []; q2Num = []; $.getJSON(\"part2.json\",\"\",function (data) &#123; $.each(data,function (i, v) &#123; q2Work.push(v.work); q2Num.push(v.num) &#125;) console.info(q2Work) console.info(q2Num) getChart2() &#125;); &#125;) $('#btn3').click(function () &#123; q3Work = []; q3Salary = []; $.getJSON(\"part3.json\",\"\",function (data) &#123; $.each(data,function (i, v) &#123; q3Work.push(v.work); q3Salary.push(v.new_salary) &#125;) console.info(q3Work) console.info(q3Salary) getChart3() &#125;); &#125;) &#125;) function getChart () &#123; var myChart = echarts.init(document.getElementById('main1')); // 显示标题，图例和空的坐标轴 myChart.setOption(&#123; title : &#123; text: '发布公司最多的Top 10', subtext: '发布公司最多的Top 10', x:'center' &#125;, tooltip: &#123; trigger: 'item', formatter: \"&#123;a&#125; &lt;br/&gt;&#123;b&#125;: &#123;c&#125; (&#123;d&#125;%)\" &#125;, legend: &#123; orient: 'vertical', x: 'left', data: q1Company &#125;, series: [ &#123; name:'来源虚构', type:'pie', radius: ['50%', '70%'], avoidLabelOverlap: false, label: &#123; normal: &#123; show: false, position: 'center' &#125;, emphasis: &#123; show: true, textStyle: &#123; fontSize: '30', fontWeight: 'bold' &#125; &#125; &#125;, labelLine: &#123; normal: &#123; show: false &#125; &#125;, data:q1Data &#125; ] &#125;); &#125; function getChart2 () &#123; var myChart = echarts.init(document.getElementById('main2')); // 显示标题，图例和空的坐标轴 myChart.setOption(&#123; title : &#123; text: '招聘职位最多的Top5', subtext: '招聘职位最多的Top5', x:'center' &#125;, color: ['#3398DB'], tooltip : &#123; trigger: 'axis', axisPointer : &#123; // 坐标轴指示器，坐标轴触发有效 type : 'shadow' // 默认为直线，可选为：'line' | 'shadow' &#125; &#125;, grid: &#123; left: '3%', right: '4%', bottom: '3%', containLabel: true &#125;, xAxis : [ &#123; type : 'category', data : q2Work, axisTick: &#123; alignWithLabel: true &#125; &#125; ], yAxis : [ &#123; type : 'value' &#125; ], series : [ &#123; name:'来源虚构', type:'bar', barWidth: '60%', data:q2Num &#125; ] &#125;); &#125; function getChart3 () &#123; var myChart = echarts.init(document.getElementById('main3')); // 显示标题，图例和空的坐标轴 myChart.setOption(&#123; title : &#123; text: '工资最高的职位Top3', subtext: '工资最高的职位Top3', x:'center' &#125;, xAxis: &#123; type: 'category', data: q3Work &#125;, yAxis: &#123; type: 'value' &#125;, series: [&#123; data: q3Salary, type: 'line', &#125;] &#125;); &#125;&lt;/script&gt;&lt;/html&gt; 4、效果图 总结几点： 1、填入数据时注意，echart的饼状图需要的数据形式是 name：xxx value：xxx 填入数据用这样的方式 1234q1Data.push(&#123; name: v.company, value: v.num&#125;); 2、定义div的时候给一个长宽大小，echart渲染才能显示出来","categories":[{"name":"spark","slug":"spark","permalink":"/categories/spark/"}],"tags":[{"name":"spark","slug":"spark","permalink":"/tags/spark/"},{"name":"sparkSQL","slug":"sparkSQL","permalink":"/tags/sparkSQL/"},{"name":"echart.js","slug":"echart-js","permalink":"/tags/echart-js/"},{"name":"大数据","slug":"大数据","permalink":"/tags/大数据/"},{"name":"数据分析","slug":"数据分析","permalink":"/tags/数据分析/"}],"author":"DBH"},{"title":"d3.js学习记录","slug":"d3-js学习记录","date":"2019-05-23T08:44:14.000Z","updated":"2019-05-23T12:24:09.414Z","comments":true,"path":"2019/05/23/d3-js学习记录/","link":"","permalink":"/2019/05/23/d3-js学习记录/","excerpt":"今天上课简单学习了一下d3.js，在这简单记录一下学习过程 d3是用来进行数据可视化的一个javascript函数库。这是d3的官网https://d3js.org/ 可以到这下载d3.js","text":"今天上课简单学习了一下d3.js，在这简单记录一下学习过程 d3是用来进行数据可视化的一个javascript函数库。这是d3的官网https://d3js.org/ 可以到这下载d3.js 1.选择元素使用d3选择元素和jqery有点像，使用select()选择符合的第一个元素，selectAll()选择所有符合的元素 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;Hello World&lt;/p&gt; &lt;p&gt;Hello World&lt;/p&gt; &lt;/body&gt; &lt;script src=\"js/d3.js\"&gt;&lt;/script&gt; &lt;script&gt; d3.select(\"body\").selectAll(\"p\").text(\"i love china\") var p = d3.select(\"body\").select(\"p\").text(\"i am hero\") p.style(\"font-size\",\"50px\").style(\"color\",\"red\") &lt;/script&gt;&lt;/html&gt; 运行截图： 2.绑定数据datum()不能针对数组绑定，data()可以针对数组绑定 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;dog&lt;/p&gt; &lt;p&gt;cat&lt;/p&gt; &lt;p&gt;pig&lt;/p&gt; &lt;/body&gt; &lt;script src=\"js/d3.js\"&gt;&lt;/script&gt; &lt;script&gt; var str = \"china\" //数据集合 var dataset = [\"123\",\"456\",\"789\"]; var Allp = d3.select('body').selectAll('p'); //datum(str)参数d:绑定的数据内容，参数i：操作第几个元素 Allp.datum(str).text(function(d,i)&#123; return '第'+(i+1)+'个元素绑定的数据是'+str; &#125;) //data(dataset)参数d:绑定的数据内容，参数i：操作第几个元素 Allp.data(dataset).text(function(d,i)&#123; return d &#125;) &lt;/script&gt;&lt;/html&gt; 运行截图： 3.插入元素1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt;666&lt;/p&gt; &lt;p id=\"myid\"&gt;myid&lt;/p&gt; &lt;p class=\"myclass\"&gt;myclass1&lt;/p&gt; &lt;p class=\"myclass\"&gt;myclass2&lt;/p&gt; &lt;/body&gt; &lt;script src=\"js/d3.js\"&gt;&lt;/script&gt; &lt;script&gt; var p = d3.select(\"body\").select(\"#myid\"); p.style(\"color\",\"red\") d3.select(\"body\").selectAll(\".myclass\").style(\"color\",\"blue\") d3.select(\"body\").append(\"p\").text(\"你是真滴秀\").style(\"color\",\"red\") d3.select(\"body\").insert(\"p\",\"#myid\").text(\"i like cat\") d3.select(\"#myid\").remove() &lt;/script&gt;&lt;/html&gt; 运行截图： ] 4.SVG图表12345678910111213141516171819202122232425262728293031323334353637&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script src=\"js/d3.js\"&gt;&lt;/script&gt; &lt;script&gt; var width = 300; var height = 300; var svg = d3.select(\"body\") .append(\"svg\") .attr(\"width\",width) .attr(\"height\",height) var dataset = [10,20,30,40,50]; var rectHeight = 25;//每个矩形所占的像素高 svg.selectAll(\"rect\") .data(dataset) .enter() .append(\"rect\") .attr(\"x\",20) //每次都是从左上角那个点开始，所以要动态变化i .attr(\"y\",function(d,i)&#123; return i * rectHeight &#125;) .attr(\"width\",function(d,i)&#123; return d &#125;) .attr(\"height\",23) .attr(\"fill\",\"steelblue\") &lt;/script&gt;&lt;/html&gt; 运行截图： 5.比例尺比例尺可以做到相对的显示数据 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;title&gt;&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script src=\"js/d3.js\"&gt;&lt;/script&gt; &lt;script&gt; var dataset= [1.2,2.3,5.2,1.5,3.3] var min = d3.min(dataset) var max = d3.max(dataset) //linear就是比例尺 var linear = d3.scale.linear() .domain([0,max]) .range([0,300]) var width = 300; var height = 300; var svg = d3.select(\"body\") .append(\"svg\") .attr(\"width\",width) .attr(\"height\",height) var rectHeight = 25;//每个矩形所占的像素高 svg.selectAll(\"rect\") .data(dataset) .enter() .append(\"rect\") .attr(\"x\",20) //每次都是从左上角那个点开始，所以要动态变化i .attr(\"y\",function(d,i)&#123; return i * rectHeight &#125;) .attr(\"width\",function(d,i)&#123; return linear(d) &#125;) .attr(\"height\",23) .attr(\"fill\",\"steelblue\") &lt;/script&gt;&lt;/html&gt; 运行截图： 6.坐标轴1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=\"utf-8\" /&gt; &lt;title&gt;&lt;/title&gt; &lt;style&gt; .axis path, .axis line&#123; fill: none; stroke: black; shape-rendering: crispEdges; &#125; .axis text &#123; font-family: sans-serif; font-size: 15px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt; &lt;script src=\"js/d3.js\"&gt;&lt;/script&gt; &lt;script&gt; var width = 300; var dataset= [1.2,2.3,3.9,1.5,3.3] var min = d3.min(dataset) var max = d3.max(dataset) var linear = d3.scale.linear() .domain([0,max]) .range([0,300]) //坐标轴 var axis = d3.svg.axis() .scale(linear) //指定比例尺 .orient(\"bottom\") //指定刻度的方向 .ticks(8); //指定刻度的数量 var width = 300; var height = 300; var svg = d3.select(\"body\") .append(\"svg\") .attr(\"width\",width) .attr(\"height\",height) //添加坐标轴transform属性可以调整位置translate(20,130)x，y //.call() svg.append(\"g\") .attr(\"class\",\"axis\") .attr(\"transform\",\"translate(20,130)\") .call(axis); var rectHeight = 25;//每个矩形所占的像素高 svg.selectAll(\"rect\") .data(dataset) .enter() .append(\"rect\") .attr(\"x\",20) //每次都是从左上角那个点开始，所以要动态变化i .attr(\"y\",function(d,i)&#123; return i * rectHeight &#125;) .attr(\"width\",function(d,i)&#123; return linear(d) &#125;) .attr(\"height\",23) .attr(\"fill\",\"steelblue\") &lt;/script&gt;&lt;/html&gt; 运行截图：","categories":[{"name":"数据可视化","slug":"数据可视化","permalink":"/categories/数据可视化/"}],"tags":[{"name":"d3.js数据可视化","slug":"d3-js数据可视化","permalink":"/tags/d3-js数据可视化/"},{"name":"数据可视化","slug":"数据可视化","permalink":"/tags/数据可视化/"},{"name":"d3.js","slug":"d3-js","permalink":"/tags/d3-js/"}],"author":"DBH"},{"title":"搭建hexo博客部署到github和coding","slug":"搭建hexo博客部署到github和coding","date":"2019-05-19T09:03:32.000Z","updated":"2019-05-23T08:06:35.829Z","comments":true,"path":"2019/05/19/搭建hexo博客部署到github和coding/","link":"","permalink":"/2019/05/19/搭建hexo博客部署到github和coding/","excerpt":"昨天在b站看到了一些关于如何搭建自己博客的视频。出于兴趣，决定动手搭一下。搭建期间也遇到了不少坑。搭完博客正好发布第一篇文章，就在这和大家分享一下搭建的过程。","text":"昨天在b站看到了一些关于如何搭建自己博客的视频。出于兴趣，决定动手搭一下。搭建期间也遇到了不少坑。搭完博客正好发布第一篇文章，就在这和大家分享一下搭建的过程。 ## 一、准备工作 - 安装git： 下载地址： git下载页面 选择符合自己系统的版本下载 默认点击下一步完成安装 - 安装node.js： 下载地址：node.js下载页面 选择符合自己系统的版本下载 默认点击下一步完成安装 - 安装hexo 安装hexo需要使用命令行安装 打开刚安装好的git bash 输入下面的命令进行安装1$ npm install hexo-cli -g此时可以看一下安装的hexo版本1$ hexo -v## 二、初始化博客 cd进入你想要创建博客的位置，xxx代表创建的博客文件夹叫什么名字，比如我是cd /c/blog在c盘的blog文件夹里面hexo init DBHblog1$ hexo init xxx这时会生成一个xxx文件夹，这个文件夹就是初始化好的你的博客目录此时我们需要cd进入这个文件夹12$ cd xxx$ hexo generate执行完命令之后，在博客目录下会产生一个public文件夹，这里面存放的就是博客静态文件。tip：hexo g是hexo generate的缩写 输入缩写也可以## 三、本地部署此时我们可以测试一下博客是否搭建成功1$ hexo servertip：hexo s 是hexo server的缩写之后我们可以到浏览器里面输入http://localhost:4000测试这说明我们成功创建了博客，但是别人访问不了，所以我们还需要把博客部署到服务器上，别人才能访问## 四、部署到github和codinggithub和coding都给注册用户提供了一个服务器，所以我们将博客部署到这两个服务器上去coding的好处就是国内服务器比github访问快我最开始也是发现github加载有点慢= =，之后就又部署到了coding#### 1.部署到github（1）首先要去https://github.com注册一个账号然后登陆（2）新建一个repository（仓库）（3）输入项目名称！！！注意仓库名称必须是:你的github用户名.github.io这个格式你的github用户名.github.io 是你的博客网址，别人可以通过这个网址访问你的博客若仓库名称不是的话会出现你404错误（4）这是git官网上说的，所以去Git bash里面执行这两句改成 你的github用户名 和 注册时验证的邮箱当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改： $ git config --global user.name &quot;John Doe&quot;$ git config --global user.email johndoe@example.com 再次强调，如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置。 然后接着生成ssh秘钥和公钥1$ ssh-keygen -t rsa -C &quot;你注册github时的邮箱&quot;按三次回车就会生成 .ssh 文件夹，在 c:\\users\\你的电脑用户名\\.ssh 里面 id_rsa是秘钥不能给别人看哦 id_rsa.pub是公钥是用来和你的私钥匹配的，一会需要使用的就是公钥我们用 notepad++之类的软件打开它，将里面的公钥全选复制到github的个人setting中选择左边这个ssh点击右侧new ssh key点击 add ssh key（5）回到git bash中将测试能否和github进行ssh连接1$ ssh -T git@github.com提示连接成功（6）修改配置 _config.yml，就是配置hexo的github地址,这样才能把我们的hexo部署到github上去用编辑器打开它，将你的github用户名粘贴上去，然后保存1234deploy: type: git repo: git@github.com:你的github用户名/你的github用户名.github.io.git branch: master这里repo可以写两种第一种：git@github.com:你的github用户名/你的github用户名.github.io.git第二种：https://github.com/你的github用户名/你的github用户名.github.io.git推荐第一种，我测试的时候用第二种每次 hexo d 的时候都要输入用户名密码，后来改成第一种就不需要重复输入了（7）创建git部署命令，之后才能使用 $ hexo deploy1$ npm install hexo-deployer-git --save（8）保存更新+部署$ hexo g(hexo generate) 和 $ hexo d(hexo deploy)二连12$ hexo generate$ hexo deploytips：1.每次修改本地文件，都需要命令$ hexo generate才能保存。而且每次使用命令都必须在博客根目录下使用。 2.如果你是windows用户，那么当你执行$ hexo deploy命令的时候，可能会先后出现提示框让你输入你的Github用户名和Github密码，只要输入正确，上传就没有问题。 （9）访问你的github用户名.github.io.git 网址就是博客页面#### 2.部署到coding（1）注册coding账号https://coding.net/login（2）新建项目这里注意！！！！ 项目地址必须是你注册的用户名，前后对应的如果不这么写最后访问博客的时候资源会渲染失败（3）同样是将之前生成的 id_rsa.pub 文件中的ssh公钥复制出来（4）打开个人设置，添加公钥（5）回到git bash中将测试能否和coding进行ssh连接1$ ssh -T git@git.coding.net提示连接成功（6）和上面一样修改配置 _config.yml添加coding的项目地址。这时有两个repo地址，用键值对形式123456deploy: type: git repo: github: git@github.com:你的github用户名/你的github用户名.github.io.git coding: git@git.coding.net:你的github用户名/你的github用户名.git branch: master（7）最后两条命令 保存，部署12$ hexo generate$ hexo deploy（8）进入你的项目部署成功后可以在代码浏览里面看到你的代码点击代码下面有个page服务，一键开启这个服务（9）开启后点击访问地址就能访问博客","categories":[{"name":"hexo","slug":"hexo","permalink":"/categories/hexo/"}],"tags":[{"name":"hexo博客","slug":"hexo博客","permalink":"/tags/hexo博客/"},{"name":"博客搭建","slug":"博客搭建","permalink":"/tags/博客搭建/"}],"author":"DBH"}]}