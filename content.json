{"meta":{"title":"DBHblog","subtitle":"--小尾巴","description":"--描述","author":"DBH","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"搭建hexo博客部署到github和coding","slug":"搭建hexo博客部署到github和coding","date":"2019-05-19T09:03:32.000Z","updated":"2019-05-20T05:53:56.892Z","comments":true,"path":"2019/05/19/搭建hexo博客部署到github和coding/","link":"","permalink":"http://yoursite.com/2019/05/19/搭建hexo博客部署到github和coding/","excerpt":"昨天在b站看到了一些关于如何搭建自己博客的视频。出于兴趣，决定动手搭一下。搭建期间也遇到了不少坑。搭完博客正好发布第一篇文章，就在这和大家分享一下搭建的过程。","text":"昨天在b站看到了一些关于如何搭建自己博客的视频。出于兴趣，决定动手搭一下。搭建期间也遇到了不少坑。搭完博客正好发布第一篇文章，就在这和大家分享一下搭建的过程。 一、准备工作 安装git：下载地址： git下载页面选择符合自己系统的版本下载默认点击下一步完成安装 安装node.js：下载地址：node.js下载页面选择符合自己系统的版本下载默认点击下一步完成安装 安装hexo安装hexo需要使用命令行安装打开刚安装好的git bash输入下面的命令进行安装 1$ npm install hexo-cli -g 此时可以看一下安装的hexo版本 1$ hexo -v 二、初始化博客 cd进入你想要创建博客的位置，xxx代表创建的博客文件夹叫什么名字，比如我是cd /c/blog在c盘的blog文件夹里面hexo init DBHblog1$ hexo init xxx 这时会生成一个xxx文件夹，这个文件夹就是初始化好的你的博客目录此时我们需要cd进入这个文件夹 12$ cd xxx$ hexo generate 执行完命令之后，在博客目录下会产生一个public文件夹，这里面存放的就是博客静态文件。 tip：hexo g是hexo generate的缩写 输入缩写也可以 三、本地部署此时我们可以测试一下博客是否搭建成功 1$ hexo server tip：hexo s 是hexo server的缩写 之后我们可以到浏览器里面输入http://localhost:4000测试 这说明我们成功创建了博客，但是别人访问不了，所以我们还需要把博客部署到服务器上，别人才能访问 四、部署到github和codinggithub和coding都给注册用户提供了一个服务器，所以我们将博客部署到这两个服务器上去 coding的好处就是国内服务器比github访问快 我最开始也是发现github加载有点慢= =，之后就又部署到了coding 1.部署到github（1）首先要去https://github.com注册一个账号然后登陆 （2）新建一个repository（仓库） （3）输入项目名称！！！注意仓库名称必须是:你的github用户名.github.io这个格式 你的github用户名.github.io 是你的博客网址，别人可以通过这个网址访问你的博客 若仓库名称不是的话会出现你404错误 （4）这是git官网上说的，所以去Git bash里面执行这两句 改成 你的github用户名 和 注册时验证的邮箱 当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改： $ git config --global user.name &quot;John Doe&quot;$ git config --global user.email johndoe@example.com 再次强调，如果使用了 --global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 --global 选项的命令来配置。 然后接着生成ssh秘钥和公钥 1$ ssh-keygen -t rsa -C &quot;你注册github时的邮箱&quot; 按三次回车就会生成 .ssh 文件夹，在 c:\\users\\你的电脑用户名\\.ssh 里面 id_rsa是秘钥不能给别人看哦 id_rsa.pub是公钥是用来和你的私钥匹配的，一会需要使用的就是公钥 我们用 notepad++之类的软件打开它，将里面的公钥全选复制 到github的个人setting中选择左边这个ssh 点击右侧new ssh key 点击 add ssh key （5）回到git bash中将测试能否和github进行ssh连接 1$ ssh -T git@github.com 提示连接成功 （6）修改配置 _config.yml，就是配置hexo的github地址,这样才能把我们的hexo部署到github上去 用编辑器打开它，将你的github用户名粘贴上去，然后保存 1234deploy: type: git repo: git@github.com:你的github用户名/你的github用户名.github.io.git branch: master 这里repo可以写两种 第一种：git@github.com:你的github用户名/你的github用户名.github.io.git 第二种：https://github.com/你的github用户名/你的github用户名.github.io.git 推荐第一种，我测试的时候用第二种每次 hexo d 的时候都要输入用户名密码，后来改成第一种就不需要重复输入了 （7）创建git部署命令，之后才能使用 $ hexo deploy 1$ npm install hexo-deployer-git --save （8）保存更新+部署$ hexo g(hexo generate) 和 $ hexo d(hexo deploy)二连 12$ hexo generate$ hexo deploy tips：1.每次修改本地文件，都需要命令$ hexo generate才能保存。而且每次使用命令都必须在博客根目录下使用。 2.如果你是windows用户，那么当你执行$ hexo deploy命令的时候，可能会先后出现提示框让你输入你的Github用户名和Github密码，只要输入正确，上传就没有问题。 （9）访问你的github用户名.github.io.git 网址就是博客页面 2.部署到coding（1）注册coding账号https://coding.net/login （2）新建项目 这里注意！！！！ 项目地址必须是你注册的用户名，前后对应的 如果不这么写最后访问博客的时候资源会渲染失败 （3）同样是将之前生成的 id_rsa.pub 文件中的ssh公钥复制出来 （4）打开个人设置，添加公钥 （5）回到git bash中将测试能否和coding进行ssh连接 1$ ssh -T git@git.coding.net 提示连接成功 （6）和上面一样修改配置 _config.yml添加coding的项目地址。这时有两个repo地址，用键值对形式 123456deploy: type: git repo: github: git@github.com:你的github用户名/你的github用户名.github.io.git coding: git@git.coding.net:你的github用户名/你的github用户名.git branch: master （7）最后两条命令 保存，部署 12$ hexo generate$ hexo deploy （8）进入你的项目 部署成功后可以在代码浏览里面看到你的代码 点击代码下面有个page服务，一键开启这个服务 （9）开启后点击访问地址就能访问博客","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[{"name":"hexo博客 博客搭建","slug":"hexo博客-博客搭建","permalink":"http://yoursite.com/tags/hexo博客-博客搭建/"}]}]}